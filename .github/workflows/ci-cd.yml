name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ==============================================
  # CODE QUALITY & SECURITY
  # ==============================================

  lint-and-type-check:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🏷️ Run TypeScript check
        run: npm run type-check

      - name: 📏 Check code formatting
        run: npm run format:check

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: +security-and-quality

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🕵️ Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

      - name: 📦 Audit npm dependencies
        run: npm audit --audit-level=high

  # ==============================================
  # TESTING
  # ==============================================

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: empathy_ledger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/empathy_ledger_test
        run: |
          npm run db:setup:test
          npm run db:migrate:test

      - name: 🎭 Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: 🏗️ Build app for e2e tests
        if: matrix.test-type == 'e2e'
        env:
          NODE_ENV: production
        run: npm run build

      - name: 🧪 Run ${{ matrix.test-type }} tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/empathy_ledger_test
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}
          NEXTAUTH_SECRET: test-secret-key-for-testing-only
        run: npm run test:${{ matrix.test-type }}

      - name: 📊 Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ==============================================
  # BUILD & DEPLOYMENT
  # ==============================================

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, security-scan, test]
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: production
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 🗄️ Run database migrations (staging)
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          npm ci
          npm run db:migrate

      - name: 🚀 Deploy to Vercel (staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --build-env NODE_ENV=production --build-env NEXT_PUBLIC_APP_ENV=staging'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🧪 Run staging smoke tests
        env:
          E2E_BASE_URL: https://staging.empathyledger.com
          E2E_ADMIN_EMAIL: ${{ secrets.STAGING_ADMIN_EMAIL }}
          E2E_ADMIN_PASSWORD: ${{ secrets.STAGING_ADMIN_PASSWORD }}
        run: npm run test:smoke:staging

      - name: 📢 Notify team of staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#dev-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 💾 Create pre-deployment backup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKUP_BUCKET: ${{ secrets.BACKUP_BUCKET }}
        run: |
          npm ci
          npm run backup:full

      - name: 🗄️ Run database migrations (production)
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PRODUCTION_SUPABASE_SERVICE_ROLE_KEY }}
          MIGRATION_TIMEOUT_MS: 600000
        run: |
          npm run db:migrate:production

      - name: 🚀 Deploy to Vercel (production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --build-env NODE_ENV=production --build-env NEXT_PUBLIC_APP_ENV=production'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🔍 Post-deployment health check
        env:
          HEALTH_CHECK_URL: https://empathyledger.com/api/health
          HEALTH_CHECK_SECRET: ${{ secrets.HEALTH_CHECK_SECRET }}
        run: |
          sleep 30  # Wait for deployment to be ready
          npm run health:check

      - name: 🧪 Run production smoke tests
        env:
          E2E_BASE_URL: https://empathyledger.com
          E2E_ADMIN_EMAIL: ${{ secrets.PRODUCTION_ADMIN_EMAIL }}
          E2E_ADMIN_PASSWORD: ${{ secrets.PRODUCTION_ADMIN_PASSWORD }}
        run: npm run test:smoke:production

      - name: 🏷️ Create GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            ${{ github.event.head_commit.message }}

            **Deployment Info:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref }}
            - Deployed at: $(date)
          draft: false
          prerelease: false

      - name: 📢 Notify team of production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#general'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

  # ==============================================
  # MIGRATION-SPECIFIC WORKFLOW
  # ==============================================

  database-migration:
    name: 🗄️ Database Migration Check
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'migration/') || contains(github.ref, 'migration/')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: empathy_ledger_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🗄️ Test migration on empty database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/empathy_ledger_migration_test
        run: |
          npm run db:migrate:test
          npm run db:seed:test

      - name: 🔄 Test rollback functionality
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/empathy_ledger_migration_test
        run: |
          npm run db:rollback:test

      - name: 📊 Generate migration report
        run: |
          npm run migration:report > migration-report.md

      - name: 📤 Upload migration report
        uses: actions/upload-artifact@v4
        with:
          name: migration-report
          path: migration-report.md

      - name: 💬 Comment migration report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('migration-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🗄️ Database Migration Report\n\n${report}`
            });

  # ==============================================
  # CLEANUP & MONITORING
  # ==============================================

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 🗑️ Clean up artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'build-files') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }

  post-deployment-monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Monitor application health
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          sleep 300  # Wait 5 minutes
          npm run monitor:errors
          npm run monitor:performance

      - name: 🚨 Create alert if issues detected
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '🚨 Post-deployment monitoring detected issues in production!'
